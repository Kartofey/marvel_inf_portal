{"version":3,"file":"static/js/981.5b4a854b.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/CharSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\n    )\n}\n\nexport default ErrorMessage;","import {useState, useEffect} from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacter(id)\n        .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef} from 'react';\nimport PropTypes from 'prop-types';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setnewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n    \n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = async(newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n        setCharList([...charList, ...newCharList]);\n        setnewItemLoading(false);\n        setOffset(offset + 9);\n        setCharEnded(ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems (arr){\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li \n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n    \n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                disabled={newItemLoading} \n                style={{'display' : charEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton/>;\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }                \n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './CharSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo);\n        this.setState({\n            error: true\n        })\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage/>\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from '../CharSearchForm/CharSearchForm';\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const {loading, request, error, clearError} = useHttp();\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=7d178160be964a03e6f3b3d694041154';\n    const _baseOffset = 210;\n    // 7d178160be964a03e6f3b3d694041154\n    // c5d6fc8b83116d92ed468ce36bac6c62\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacterByName = async (name) => {\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getAllComics = async (offset = 0) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformComics);\n\t};\n\n\tconst getComics = async (id) => {\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n\t\treturn _transformComics(res.data.results[0]);\n\t};\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n\n    const _transformComics = (comics) => {\n\t\treturn {\n\t\t\tid: comics.id,\n\t\t\ttitle: comics.title,\n\t\t\tdescription: comics.description || \"There is no description\",\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} p.`\n\t\t\t\t: \"No information about the number of pages\",\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\n\t\t\t// optional chaining operator\n\t\t\tprice: comics.prices[0].price\n\t\t\t\t? `${comics.prices[0].price}$`\n\t\t\t\t: \"not available\",\n\t\t};\n\t};\n\n    return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComics, getCharacterByName}\n}\n\nexport default useMarvelService;","import {useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n    setLoading(true);\r\n\r\n    try {\r\n\r\n      const response = await fetch(url, {method, body, headers});\r\n\r\n      if(!response.ok) {\r\n        throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n      }\r\n\r\n\r\n      const data = await response.json();\r\n      setLoading(false);\r\n      return data;\r\n\r\n    } catch(e) {\r\n      setLoading(false);\r\n      setError(e.message);\r\n      throw e;\r\n    }\r\n\r\n  }, []);\r\n\r\n  const clearError = useCallback(() => setError(null), []);\r\n\r\n  return {loading, request, error, clearError}\r\n}"],"names":["_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","char","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","_useState","useState","_useState2","_slicedToArray","setChar","_useMarvelService","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","_useState3","_useState4","newItemLoading","setnewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","_asyncToGenerator","_regeneratorRuntime","mark","_callee","newCharList","ended","wrap","_context","prev","next","length","concat","_toConsumableArray","stop","_x","apply","arguments","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","_Fragment","comics","charId","skeleton","Skeleton","getCharacterByName","results","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","state","_createClass","value","errorInfo","console","log","this","setState","Component","selectedChar","Helmet","RandomChar","CharList","CharInfo","CharSearchForm","decoration","_useHttp","setLoading","setError","request","useCallback","url","method","body","headers","response","data","_args","undefined","fetch","sent","ok","Error","status","json","abrupt","t0","message","useHttp","_apiBase","_apiKey","res","_transformCharacter","_ref2","_callee2","_context2","_ref3","_callee3","_context3","_x2","getAllComics","_ref4","_callee4","_args4","_context4","_transformComics","getComics","_ref5","_callee5","_context5","_x3","slice","path","extension","urls","_comics$textObjects$","title","pageCount","language","textObjects","price","prices"],"sourceRoot":""}